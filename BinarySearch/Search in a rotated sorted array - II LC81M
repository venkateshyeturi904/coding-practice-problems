/*
Intuition
Traditional binary search : At each iteration, find if the target element lies in the left half or right half by comparing mid & left or mid & right values. After knowing the part , update the left or right values accordingly.

Try to use traditional binary search but it fails due to presence of duplicate elements in the array.

Failing test case 1 :
[1,0,1,1,1] 0
Failing test case 2 :
[1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1] 2

So these are the cases where we cannot decide whether the target element is in the left part or right part.

At this instant we can just go for both the parts with individual binary search which is achieved by Recursion.

Complexity
Time complexity:O(logn)O(logn)O(logn)
Space complexity:O(1)O(1)O(1)
Code
*/
class Solution {
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        int left = 0;
        int right = n-1;
        return BS(left, right, target, nums);
    }
    public boolean BS(int left, int right, int target, int[] nums){
        while(left<=right){
            int mid = (left+right)/2;
            if(nums[mid]==target) return true;
            if(nums[left]<nums[mid]){
                if(target>=nums[left] && target<=nums[mid]){
                    right = mid-1;
                }else{
                    left = mid+1;
                }
            }else if(nums[left]==nums[mid]){    
                if(nums[right]==nums[mid]){
                    return BS(left, mid-1, target, nums) || BS(mid+1, right, target, nums);
                }else{
                    left = mid+1;
                }
            }else{
                if(target>=nums[mid] && target<=nums[right]){
                    left = mid+1;
                }else{
                    right = mid-1;
                }
            }
        }
        return false;
    }
}
