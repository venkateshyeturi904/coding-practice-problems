/*
Intuition
We have to check all the possible positions for splitting and whenever one '1' is already being carried, we can have a split or continue in case of '0'. If '1' is not being carried, we cannot split at that index and we move right side and seach for '1's.

Approach
have variable here indicates if we have already visited '1' previously till that index.
split variable indicates we are splitting at that index.

Complexity
Time complexity: 
Space complexity: O(n)
*/



class Solution {
    int mod=1000000007;
    int[] nums;
    int n;
    Integer[][] dp ;
    public int numberOfGoodSubarraySplits(int[] nums) {
        this.nums = nums;
        this.n = nums.length;
        dp = new Integer[n+1][2];
        return dfs(0,0);
    }
    public int dfs(int i, int have){
        if(i>=n){
            
            if(have==1) return 1;
            else return 0;
        }
        if(dp[i][have]!=null) return dp[i][have];
        int split = 0;
        int notSplit = 0;
        if(have==1){
            if(nums[i]==1){
                return 0;
            }else{
                split = dfs(i+1,0);
                notSplit = dfs(i+1,1);
            }
        }else{
            if(nums[i]==1){
                notSplit = dfs(i+1,1);
                split = dfs(i+1,0);
            }else{
                notSplit = dfs(i+1,0);
            }
        }
        return dp[i][have] = ( split%mod + notSplit%mod ) % mod;
    }
}
