/*
Intuition
From every index containing 1 we can perform a traversal (DFS or BFS ) and mark all the visited indices. In this way we can count the unvisited new indies which correspond to the no.of islands.

Complexity
Time complexity: O(n∗m)O(n*m)O(n∗m)
Space complexity: O(n∗m)O(n*m)O(n∗m)
Code
*/
class Solution {
    int n;
    int m;
    char[][] grid;
    int[][] dir = {{0,1},{1,0},{-1,0},{0,-1}}; 
    public int numIslands(char[][] grid) {
        int count = 0;
        this.grid = grid;
        this.n = grid.length;
        this.m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j] || grid[i][j]=='0') continue;
                count++;
                dfs(i,j,visited);
            }
        }
        return count;
    }
    public void dfs(int i, int j, boolean[][] visited){
        if(i<0 || i>=n || j<0 || j>=m || grid[i][j] == '0' || visited[i][j]) return;
        visited[i][j] = true;
        for(int k=0;k<4;k++){
            dfs(i+dir[k][0], j+dir[k][1], visited);
        }
    }
}
