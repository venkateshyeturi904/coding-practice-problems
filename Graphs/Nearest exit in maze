class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(entrance);
        int steps = 0;
        boolean[][] visited = new boolean[maze.length][maze[0].length];
        while(!queue.isEmpty()){
            int size = queue.size();
            while(size-->0){
                int[] cur = queue.poll();
                int i = cur[0];
                int j = cur[1];
                visited[i][j] = true;
                int[][] dir = {{0,1},{1,0},{-1,0},{0,-1}};
                for(int k=0;k<4;k++){
                    int x = i+dir[k][0], y = j+dir[k][1];
                    if(x<0 || y<0 || x==maze.length || y==maze[0].length){
                        if(steps>0) return steps;
                    }
                    else if(maze[x][y]!='+' && !visited[x][y]){
                        queue.offer(new int[]{x,y});
                        visited[x][y] = true;
                    }
                }
            }
            steps++;
        }
        return -1;
    }
}
