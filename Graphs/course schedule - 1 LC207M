class Solution {
    Set<Integer> trues = new HashSet<>();
    public boolean canFinish(int n, int[][] pre) {
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i=0;i<n;i++) map.put(i,new ArrayList<>());
        for(int[] p : pre){
            if(p[0]==p[1]) return false;
            map.get(p[0]).add(p[1]);
        }
        for(int i=0;i<n;i++){
            if(!dfs(i,map,new HashSet<>())){
                return false;
            }else{
                trues.add(i);
            }
        }
        return true;
    }
    public boolean dfs(int i, Map<Integer,List<Integer>> map, Set<Integer> visited){
        if(trues.contains(i)) return true;
        if(visited.contains(i)) return false;
        visited.add(i);
        boolean check = true;
        for(int link : map.get(i)){
            check = check && dfs(link,map,visited);
        }
        visited.remove(i);
        return check;
    }
}

