class Solution {
    Map<Integer,List<Integer>> map = new HashMap<>();
    List<Integer> ans = new ArrayList<>();
    Set<Integer> updateVisited = new HashSet<>();
    Set<Integer> trues = new HashSet<>();
    Set<Integer> falses = new HashSet<>();
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        for(int i=0;i<n;i++) map.put(i,new ArrayList<>());
        for(int i=0;i<n;i++){
            for(int j : graph[i]) map.get(i).add(j);
        }
        for(int i=0;i<n;i++){
            if(dfs(i)) ans.add(i);
        }
        return ans;
    }
    public boolean dfs(int i){
        if(updateVisited.contains(i)) return false;
        updateVisited.add(i);
        boolean check = true;
        for(int link : map.get(i)){
            if(trues.contains(link)) continue;
            if(falses.contains(link)) check = false;
            check = check && dfs(link);
            // updateVisited.remove(link);              // redundant
        }
        updateVisited.remove(i);
        if(check){
            trues.add(i);
        }else{
            falses.add(i);
        }
        return check;
    }
}
