class Solution {
    Map<Integer,List<Integer>> map = new HashMap<>();
    boolean[] visited;
    int[] store ;
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        visited = new boolean[n];
        store = new int[n];
        for(int i=0;i<n;i++) map.put(i, new ArrayList<>());
        for(int i=0;i<n; i++){
            for(int j : graph[i]) map.get(i).add(j);
        }
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            if(!(dfs(i,1))) return false;
        }
        return true;
    }
    public boolean dfs(int i, int grp){
        if(store[i]==-grp) return false;
        if(visited[i]) return true;
        store[i] = grp;
        visited[i] = true;
        boolean check = true;
        for(int link : map.get(i)){
            check = check && dfs(link, -grp);
        }
        return check;
    }
}
