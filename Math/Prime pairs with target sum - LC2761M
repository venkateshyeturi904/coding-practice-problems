/*
Intuition
This algorithm gives all the prime numbers under n.
Logic : Create an array of n+1 size to mark all the visited numbers.
for i in range ( 2 to n ) , mark all the multiples of i as they cannot be the primes numbers .
Now all the unmarked numbers are prime numbers.
But complexity will be high i.e ~ O(n2)(n^2)(n 
2
 )
Observe when i = 2, the multiples 4, 6, 8, 10, 12, 14, 16, .. get marked.
when i = 3, the multiples 6, 9, 12, 15, ... get marked
when i = 4, the multiples 8, 12, 16, 20.. get marked.
when i = 5, the multiples 10, 15, 20, 25....
But 10 (25) is already marked by 2, 15 (35) is already marked by 3 and 20 (4*5) is already marked by 4. So its enough to start from 25 i.e (5^2) .
So for each i, start from i^2 till n mark all the multiples.

Complexity
Time complexity: O(n∗log(logn))O(n *log (log n) )O(n∗log(logn))
= √n + n/2 + n/3 + n/4 + ....
= n * (1/√n + 1/2 + 1/4 + ...)
= n log log n
Space complexity: O(n)O(n)O(n)
Code
*/

class Solution {
    public List<List<Integer>> findPrimePairs(int n) {
        List<List<Integer>> ans = new ArrayList<>();
        int[] primes = new int[n+1];
        for(int i=2;i<=(int)Math.sqrt(n);i++){
            if(primes[i]==0){
                for(int j = i*i;j<=n;j+=i){
                    primes[j] = 1;
                }
            }
        }
        for(int i=2;i<=n/2;i++){
            if(primes[i]==0 && primes[n-i]==0){
                ans.add(new ArrayList<>(Arrays.asList(i,n-i)));
            }
        }
        return ans;
    }
}
