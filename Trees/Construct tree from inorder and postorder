/*
Intuition
Inorder : left, root, right
Postorder : left, right, root

Complexity
Time complexity: O(n)O(n)O(n)
Space complexity: O(n)O(n)O(n)
Code
*/


class Solution {
    Map<Integer,Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int n = inorder.length;
        for(int i=0;i<n;i++) map.put(inorder[i],i);
        return getRoot(inorder, 0, n-1, postorder, 0, n-1);
    }
    public TreeNode getRoot(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd){
        if(inStart>inEnd || postStart>postEnd) return null;
        int rootValue = postorder[postEnd];
        int rootIndexInorder = map.get(rootValue);
        int leftCount = rootIndexInorder-inStart;
        int rightCount = inEnd-rootIndexInorder;
        TreeNode root = new TreeNode(rootValue);
        root.left = getRoot(inorder, inStart, rootIndexInorder-1, postorder, postStart, postStart + leftCount -1);
        root.right = getRoot(inorder, rootIndexInorder+1, inEnd, postorder, postStart+leftCount, postEnd-1);
        return root;
    }
}
